{"version":3,"sources":["components/App.js","reportWebVitals.js","data.js","index.js"],"names":["App","useState","openedCard","setOpenedCard","matched","setMatched","pokemons","id","name","pairOfPokemons","useEffect","firstMatched","secondMatched","length","setTimeout","className","map","pokemon","index","isFlipped","includes","onClick","opened","flipCard","src","alt","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","slides","title","text","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAOe,SAASA,IAAO,IAAD,EACQC,mBAAS,IADjB,mBACrBC,EADqB,KACTC,EADS,OAEEF,mBAAS,IAFX,mBAErBG,EAFqB,KAEZC,EAFY,KAItBC,EAAW,CACf,CAAEC,GAAI,EAAGC,KAAM,aACf,CAAED,GAAI,EAAGC,KAAM,YACf,CAAED,GAAI,EAAGC,KAAM,aACf,CAAED,GAAI,EAAGC,KAAM,aACf,CAAED,GAAI,EAAGC,KAAM,YACf,CAAED,GAAI,EAAGC,KAAM,aACf,CAAED,GAAI,EAAGC,KAAM,YACf,CAAED,GAAI,EAAGC,KAAM,cAIXC,EAAc,UAAOH,EAAaA,GAoBxC,OAbAI,qBAAU,WAGR,IAAMC,EAAeF,EAAeP,EAAW,IACzCU,EAAgBH,EAAeP,EAAW,IAE5CU,GAAiBD,EAAaJ,KAAOK,EAAcL,IACrDF,EAAW,GAAD,mBAAKD,GAAL,CAAcO,EAAaJ,MAGb,IAAtBL,EAAWW,QAAcC,YAAW,kBAAMX,EAAc,MAAK,QAIjE,qBAAKY,UAAU,MAAf,SACE,qBAAKA,UAAU,QAAf,SACGN,EAAeO,KAAI,SAACC,EAASC,GAG5B,IAAIC,GAAY,EAIhB,OAFIjB,EAAWkB,SAASF,KAAQC,GAAY,GACxCf,EAAQgB,SAASH,EAAQV,MAAKY,GAAY,GAE5C,qBACEJ,UAAS,uBAAkBI,EAAY,UAAY,GAA1C,KAETE,QAAS,kBA/BrB,SAAkBH,GAChBf,GAAc,SAACmB,GAAD,4BAAgBA,GAAhB,CAAwBJ,OA8BbK,CAASL,IAH1B,SAKE,sBAAKH,UAAU,QAAf,UACE,qBAAKA,UAAU,QAAf,SACE,qBACES,IAAG,UAzDX,gDAyDW,YAAYP,EAAQV,GAApB,QACHkB,IAAI,eACJC,MAAM,UAGV,qBAAKX,UAAU,aAXZG,UCxDnB,IAYeS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCgBGQ,EAvBF,CACX,CACEC,MAAO,uBACPC,KAAM,2CAER,CACED,MAAO,qBACPC,KAAM,gEAER,CACED,MAAO,kBACPC,KAAM,8DAER,CACED,MAAO,sBACPC,KAAM,kEAER,CACED,MAAO,aACPC,KAAM,wDCZZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKL,OAAQA,MAEfM,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.9205b16f.chunk.js","sourcesContent":["\n\nimport React, { useEffect, useState } from \"react\";\nimport \"../styles/App.css\"\n\nconst url = \"https://pokeres.bastionbot.org/images/pokemon\";\n\nexport default function App() {\n  const [openedCard, setOpenedCard] = useState([]);\n  const [matched, setMatched] = useState([]);\n\n  const pokemons = [\n    { id: 1, name: \"balbasaur\" },\n    { id: 8, name: \"wartotle\" },\n    { id: 9, name: \"blastoise\" },\n    { id: 6, name: \"charizard\" },\n    { id: 2, name: \"Venusaur\" },\n    { id: 3, name: \"Charmande\" },\n    { id: 4, name: \"Squirtle\" },\n    { id: 5, name: \"Wartortle\" },\n  ];\n\n\n  const pairOfPokemons = [...pokemons, ...pokemons];\n // console.log(pairOfPokemons)\n\n  function flipCard(index) {\n    setOpenedCard((opened) => [...opened, index]);\n  }\n\n  useEffect(() => {\n    \n\n    const firstMatched = pairOfPokemons[openedCard[0]];\n    const secondMatched = pairOfPokemons[openedCard[1]];\n\n    if (secondMatched && firstMatched.id === secondMatched.id) {\n      setMatched([...matched, firstMatched.id]);\n    }\n\n    if (openedCard.length === 2) setTimeout(() => setOpenedCard([]), 1000);\n  },);\n\n  return (\n    <div className=\"App\">\n      <div className=\"cards\">\n        {pairOfPokemons.map((pokemon, index) => {\n          //lets flip the card\n\n          let isFlipped = false;\n\n          if (openedCard.includes(index)) isFlipped = true;\n          if (matched.includes(pokemon.id)) isFlipped = true;\n          return (\n            <div\n              className={`pokemon-card ${isFlipped ? \"flipped\" : \"\"} `}\n              key={index}\n              onClick={() => flipCard(index)}\n            >\n              <div className=\"inner\">\n                <div className=\"front\">\n                  <img\n                    src={`${url}/${pokemon.id}.png`}\n                    alt=\"pokemon-name\"\n                    width=\"100\"\n                  />\n                </div>\n                <div className=\"back\"></div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const slides = [\r\n    {\r\n      title: \"Today's workout plan\",\r\n      text: \"We're gonna do 3 fundamental exercises.\",\r\n    },\r\n    {\r\n      title: \"First, 10 push-ups\",\r\n      text: \"Do 10 reps. Remember about full range of motion. Don't rush.\",\r\n    },\r\n    {\r\n      title: \"Next, 20 squats\",\r\n      text: \"Squats are important. Remember to keep your back straight.\",\r\n    },\r\n    {\r\n      title: \"Finally, 15 sit-ups\",\r\n      text: \"Slightly bend your knees. Remember about full range of motion.\",\r\n    },\r\n    {\r\n      title: \"Great job!\",\r\n      text: \"You made it, have a nice day and see you next time!\",\r\n    },\r\n  ];\r\n\r\n  export default slides;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport slides from './data.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App slides={slides}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}